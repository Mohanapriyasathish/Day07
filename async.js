//1.a
async function api(){
    v= fetch('https:restcountries.com/v3.1/all')
    out = await v
    prom = out.json()
    out1 =await prom
    console.log(out1.filter(region=>region.region=='Asia'));
}
api()
//-----------------------------------------------------------------------------------------
//1.b
async function api(){
    v = fetch('https:restcountries.com/v3.1/all')
    out = await v
    prom = out.json()
    out1 = await prom
    out2=(out1.map(item=> item.population));
         let pepoles=out2.filter(population => population <200000);
       
        console.log(pepoles);
    
}
api()
//---------------------------------------------------------------------------------------------
//1.c.doubt
const getapi= async ()=>{
   await fetch('https:restcountries.com/v3.1/all')
   .then((response)=> response.json())
   .then((data)=>{
    data.forEach(element=>{
    console.log(element.name)
    })
   })
   }
getapi();

const getapi= async ()=>{
  await fetch('https:restcountries.com/v3.1/all')
  .then((response)=> response.json())
  .then((data)=>{
   data.forEach(element=>{
     console.log(element.capital)
   })
  })
  }
getapi();

const getapi= async ()=>{
  await fetch('https:restcountries.com/v3.1/all')
  .then((response)=> response.json())
  .then((data)=>{
   data.forEach(element=>{
     console.log(element.flag)
   })
  })
  }
getapi();


//----------------------------------------------------------------
//1.d
async function api(){
    v= fetch('https:restcountries.com/v3.1/all')
    out = await v
    prom = out.json()
    out1 =await prom
     out2=(out1.map(item=> item.population));
    //console.log(out2);
    const population=[
      366425,
      125836021,
      271960,
      15893219,
      10203140,
      25987,
      44700000,
      5084300,
      19116209,
      67391582,
      2142252,
      6825442,
      38718,
      5379475,
      32971846,
      17500657,
      10834,
      896444,
      9904608,
      12123198,
      18092,
      38659,
      2562,
      621718,
      1331057,
      112519,
      5685807,
      20250834,
      18754440,
      47351567,
      39244,
      98462,
      2963234,
      1402112000,
      32365998,
      29458,
      77265,
      84339067,
      11750,
      114963583,
      7132530,
      10698896,
      83992953,
      1967998,
      31072945,
      16655799,
      10353442,
      786559,
      437483,
      43849269,
      8917205,
      28435943,
      1160164,
      4803269,
      219161,
      57557,
      53771300,
      8947027,
      16425859,
      23503349,
      555988,
      110947,
      6031187,
      2617820,
      19286123,
      59194,
      85032,
      1000,
      7275556,
      2540916,
      4270563,
      8278737,
      128932753,
      329484123,
      198410,
      7976985,
      59308690,
      6591600,
      17643060,
      5458827,
      53192,
      0,
      3000,
      2881060,
      105697,
      50882884,
      19129955,
      65720,
      67215293,
      16718971,
      1775378,
      6908224,
      59554023,
      21919000,
      106290,
      1901548,
      2961161,
      2302,
      13452,
      8654622,
      13132792,
      4047200,
      400,
      11792,
      1207361,
      273523621,
      3280815,
      988002,
      2072,
      1265740,
      2351625,
      20903278,
      5530719,
      30,
      2225728,
      40222503,
      102334403,
      97338583,
      108407721,
      25687041,
      206139587,
      14862927,
      2077132,
      115021,
      5657000,
      5057677,
      18100,
      3194034,
      45376763,
      4255,
      287371,
      400132,
      5352000,
      54409794,
      26378275,
      29825968,
      106766,
      164689383,
      586634,
      212559409,
      4994724,
      632275,
      11818618,
      11555997,
      226915,
      155014,
      840974,
      307150,
      0,
      97928,
      11326616,
      11890781,
      11673029,
      48865,
      55197,
      6069,
      37950802,
      38005238,
      16858333,
      10715549,
      25778815,
      45741000,
      40218234,
      30237,
      10110116,
      4649660,
      10305564,
      40812,
      3278292,
      686878,
      34232050,
      109581085,
      6486201,
      1701583,
      2837743,
      3714000,
      771612,
      34813867,
      393248,
      9890400,
      11402533,
      510713,
      6871287,
      451,
      4829764,
      5094114,
      69799978,
      56367,
      254541,
      36910558,
      59734213,
      53192,
      7500700,
      63903,
      168783,
      44134693,
      649342,
      31255435,
      10847904,
      4922,
      9216900,
      4314768,
      6927288,
      16743930,
      5831404,
      11193729,
      2416664,
      5106622,
      144104080,
      32866268,
      1402985,
      29136808,
      83240525,
      100800,
      869595,
      1380004385,
      9749763,
      1318442,
      280904,
      2563,
      71991,
      525285,
      56,
      1399491,
      62999,
      24206636,
      33691,
      183629,
      397621,
      119446,
      27691019,
      51780579,
      300,
      2100126,
      378243,
      1470,
      3473727,
      33938,
      6624554,
      18383956,
      220892331,
      1411,
      26545864,
      38137,
      12952209,
      9398861,
      540542,
      2794700,
      9537642,
      544
  ]
  const total=population.reduce(sum,0);
  function sum(accumlator,value){
    return accumlator+value;
      }
      console.log(total);
}
api()
//--------------------------------------------------------------------------------------------------------------
//1.e.
const getdata=async()=>{
  await fetch("https:restcountries.com/v3.1/all")
  .then((response)=>response.json())
  .then((data)=>{
    console.log(data.filter((item)=>{
      if(item.currencies){
        return Object.keys(item.currencies)[0]==="USD"
      }
    }))
  })
}
getdata()